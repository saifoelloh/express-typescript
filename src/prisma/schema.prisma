// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
  COORDINATOR
}

enum QuizType {
  BINARY_OPTION
  MULTIPLE_CHOICE
  ESSAY
}

enum PAYMENT_METHODS {
  DEBIT
  CREDIT
  CASH
  POINT
}

enum ORDER_STATUS {
  CREATED
  PAID
  VALIDATED
  CANCELED
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  imageId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses         Course[]
  orders          Order[]
  image           Image?        @relation(fields: [imageId], references: [id])
  orderValidation OrderStatus[]
  @@index([id, imageId])
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id            String   @id @default(uuid())
  name          String
  description   String
  price         Float    @default(0)
  coordinator   User     @relation(fields: [coordinatorId], references: [id])
  coordinatorId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  images     Image[]
  categories Category[]
  chapters   Chapter[]
  @@index([id, coordinatorId])
}

model Image {
  id        String   @id @default(uuid())
  name      String
  extension String
  path      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User[]
  courses Course[]
}

model Chapter {
  id          String   @id @default(uuid())
  title       String
  description String
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  quizzes Quiz[]
  @@index([id, courseId])
}

model Quiz {
  id        String   @id @default(uuid())
  question  String
  quizType  QuizType @default(BINARY_OPTION)
  chapterId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  answers Choice[]
  chapter Chapter  @relation(fields: [chapterId], references: [id])
  @@index([id, chapterId])
}

model Choice {
  id        String   @id @default(uuid())
  answer    String   @default("")
  isCorrect Boolean  @default(false)
  quizId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quiz Quiz @relation(fields: [quizId], references: [id])
  @@index([id, quizId])
}

model Order {
  id        String          @id @default(uuid())
  userId    String
  payment   PAYMENT_METHODS
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  user      User          @relation(fields: [userId], references: [id])
  carts     Cart[]
  discounts Discount[]
  status    OrderStatus[]
  @@index([id, userId])
}

model OrderStatus {
  id        String       @id @default(uuid())
  orderId   String
  userId    String?
  status    ORDER_STATUS @default(CREATED)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  order Order @relation(fields: [orderId], references: [id])
  admin User? @relation(fields: [userId], references: [id])
  @@index([id, orderId, userId])
}

model Cart {
  id         String          @id @default(uuid())
  orderId    String
  discountId String?
  payment    PAYMENT_METHODS
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  order    Order     @relation(fields: [orderId], references: [id])
  discount Discount? @relation(fields: [discountId], references: [id])
  @@index([id, orderId, discountId])
}

model Discount {
  id         String   @id @default(uuid())
  orderId    String
  percentage Float
  expire     DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  order Order  @relation(fields: [orderId], references: [id])
  carts Cart[]
  @@index([id, orderId])
}
